/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteE47Args } from "./DeleteE47Args";
import { E47FindManyArgs } from "./E47FindManyArgs";
import { E47FindUniqueArgs } from "./E47FindUniqueArgs";
import { E47 } from "./E47";
import { E47Service } from "../e47.service";

@graphql.Resolver(() => E47)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class E47ResolverBase {
  constructor(
    protected readonly service: E47Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "E47",
    action: "read",
    possession: "any",
  })
  async _e47sMeta(
    @graphql.Args() args: E47FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [E47])
  @nestAccessControl.UseRoles({
    resource: "E47",
    action: "read",
    possession: "any",
  })
  async e47s(@graphql.Args() args: E47FindManyArgs): Promise<E47[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => E47, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "E47",
    action: "read",
    possession: "own",
  })
  async e47(@graphql.Args() args: E47FindUniqueArgs): Promise<E47 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E47)
  @nestAccessControl.UseRoles({
    resource: "E47",
    action: "delete",
    possession: "any",
  })
  async deleteE47(@graphql.Args() args: DeleteE47Args): Promise<E47 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
