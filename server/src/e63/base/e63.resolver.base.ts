/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteE63Args } from "./DeleteE63Args";
import { E63FindManyArgs } from "./E63FindManyArgs";
import { E63FindUniqueArgs } from "./E63FindUniqueArgs";
import { E63 } from "./E63";
import { E63Service } from "../e63.service";

@graphql.Resolver(() => E63)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class E63ResolverBase {
  constructor(
    protected readonly service: E63Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "E63",
    action: "read",
    possession: "any",
  })
  async _e63sMeta(
    @graphql.Args() args: E63FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [E63])
  @nestAccessControl.UseRoles({
    resource: "E63",
    action: "read",
    possession: "any",
  })
  async e63s(@graphql.Args() args: E63FindManyArgs): Promise<E63[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => E63, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "E63",
    action: "read",
    possession: "own",
  })
  async e63(@graphql.Args() args: E63FindUniqueArgs): Promise<E63 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E63)
  @nestAccessControl.UseRoles({
    resource: "E63",
    action: "delete",
    possession: "any",
  })
  async deleteE63(@graphql.Args() args: DeleteE63Args): Promise<E63 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
