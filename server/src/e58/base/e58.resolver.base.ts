/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteE58Args } from "./DeleteE58Args";
import { E58FindManyArgs } from "./E58FindManyArgs";
import { E58FindUniqueArgs } from "./E58FindUniqueArgs";
import { E58 } from "./E58";
import { E58Service } from "../e58.service";

@graphql.Resolver(() => E58)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class E58ResolverBase {
  constructor(
    protected readonly service: E58Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "E58",
    action: "read",
    possession: "any",
  })
  async _e58sMeta(
    @graphql.Args() args: E58FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [E58])
  @nestAccessControl.UseRoles({
    resource: "E58",
    action: "read",
    possession: "any",
  })
  async e58s(@graphql.Args() args: E58FindManyArgs): Promise<E58[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => E58, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "E58",
    action: "read",
    possession: "own",
  })
  async e58(@graphql.Args() args: E58FindUniqueArgs): Promise<E58 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E58)
  @nestAccessControl.UseRoles({
    resource: "E58",
    action: "delete",
    possession: "any",
  })
  async deleteE58(@graphql.Args() args: DeleteE58Args): Promise<E58 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
