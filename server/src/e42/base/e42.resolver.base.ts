/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteE42Args } from "./DeleteE42Args";
import { E42FindManyArgs } from "./E42FindManyArgs";
import { E42FindUniqueArgs } from "./E42FindUniqueArgs";
import { E42 } from "./E42";
import { E42Service } from "../e42.service";

@graphql.Resolver(() => E42)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class E42ResolverBase {
  constructor(
    protected readonly service: E42Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "E42",
    action: "read",
    possession: "any",
  })
  async _e42sMeta(
    @graphql.Args() args: E42FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [E42])
  @nestAccessControl.UseRoles({
    resource: "E42",
    action: "read",
    possession: "any",
  })
  async e42s(@graphql.Args() args: E42FindManyArgs): Promise<E42[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => E42, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "E42",
    action: "read",
    possession: "own",
  })
  async e42(@graphql.Args() args: E42FindUniqueArgs): Promise<E42 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E42)
  @nestAccessControl.UseRoles({
    resource: "E42",
    action: "delete",
    possession: "any",
  })
  async deleteE42(@graphql.Args() args: DeleteE42Args): Promise<E42 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
