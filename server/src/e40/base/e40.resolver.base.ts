/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteE40Args } from "./DeleteE40Args";
import { E40FindManyArgs } from "./E40FindManyArgs";
import { E40FindUniqueArgs } from "./E40FindUniqueArgs";
import { E40 } from "./E40";
import { E40Service } from "../e40.service";

@graphql.Resolver(() => E40)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class E40ResolverBase {
  constructor(
    protected readonly service: E40Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "E40",
    action: "read",
    possession: "any",
  })
  async _e40sMeta(
    @graphql.Args() args: E40FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [E40])
  @nestAccessControl.UseRoles({
    resource: "E40",
    action: "read",
    possession: "any",
  })
  async e40s(@graphql.Args() args: E40FindManyArgs): Promise<E40[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => E40, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "E40",
    action: "read",
    possession: "own",
  })
  async e40(@graphql.Args() args: E40FindUniqueArgs): Promise<E40 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E40)
  @nestAccessControl.UseRoles({
    resource: "E40",
    action: "delete",
    possession: "any",
  })
  async deleteE40(@graphql.Args() args: DeleteE40Args): Promise<E40 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
