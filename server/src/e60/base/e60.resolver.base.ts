/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteE60Args } from "./DeleteE60Args";
import { E60FindManyArgs } from "./E60FindManyArgs";
import { E60FindUniqueArgs } from "./E60FindUniqueArgs";
import { E60 } from "./E60";
import { E60Service } from "../e60.service";

@graphql.Resolver(() => E60)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class E60ResolverBase {
  constructor(
    protected readonly service: E60Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "E60",
    action: "read",
    possession: "any",
  })
  async _e60sMeta(
    @graphql.Args() args: E60FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [E60])
  @nestAccessControl.UseRoles({
    resource: "E60",
    action: "read",
    possession: "any",
  })
  async e60s(@graphql.Args() args: E60FindManyArgs): Promise<E60[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => E60, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "E60",
    action: "read",
    possession: "own",
  })
  async e60(@graphql.Args() args: E60FindUniqueArgs): Promise<E60 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E60)
  @nestAccessControl.UseRoles({
    resource: "E60",
    action: "delete",
    possession: "any",
  })
  async deleteE60(@graphql.Args() args: DeleteE60Args): Promise<E60 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
