/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteE65Args } from "./DeleteE65Args";
import { E65FindManyArgs } from "./E65FindManyArgs";
import { E65FindUniqueArgs } from "./E65FindUniqueArgs";
import { E65 } from "./E65";
import { E65Service } from "../e65.service";

@graphql.Resolver(() => E65)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class E65ResolverBase {
  constructor(
    protected readonly service: E65Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "E65",
    action: "read",
    possession: "any",
  })
  async _e65sMeta(
    @graphql.Args() args: E65FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [E65])
  @nestAccessControl.UseRoles({
    resource: "E65",
    action: "read",
    possession: "any",
  })
  async e65s(@graphql.Args() args: E65FindManyArgs): Promise<E65[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => E65, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "E65",
    action: "read",
    possession: "own",
  })
  async e65(@graphql.Args() args: E65FindUniqueArgs): Promise<E65 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => E65)
  @nestAccessControl.UseRoles({
    resource: "E65",
    action: "delete",
    possession: "any",
  })
  async deleteE65(@graphql.Args() args: DeleteE65Args): Promise<E65 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
